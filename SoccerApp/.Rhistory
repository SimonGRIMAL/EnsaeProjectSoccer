sanitize.text.function = function(x) x
)
})
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
test[test$test1 == 1, "test1"] <- '<div style="width: 100%; height: 100%; z-index: 0; background-color: green; position:absolute; top: 0; left: 0; padding:5px;">
<span>75</span></div>'
test[test$test1 == 2, "test2"] <- '<div style="width: 100%; height: 100%; z-index: 0; background-color: blue; position:absolute; top: 0; left: 0; padding:5px;">
<span>fgfvqfv</span></div>'
test[test$test1 == 3, "test2"] <- paste('<div style="width: 100%; height: 100%; z-index: 0; background-color: blue; position:absolute; top: 0; left: 0; padding:5px;">
<span>', test$test1, '</span></div>')
test[test$test1 == 3, "test2"] <- paste('<div style="width: 100%; height: 100%; z-index: 0; background-color: blue; position:absolute; top: 0; left: 0; padding:5px;">
<span>', test$test1[3], '</span></div>')
ui <- shinyUI(fluidPage(
tableOutput("tt"),
tags$head(tags$style("#tt td{
position:relative;
};
"))
)
)
server <- shinyServer(function(input, output) {
output$tt <- renderTable({
test
}
,
sanitize.text.function = function(x) x
)
})
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
test[test$test1 == 1, "test1"] <- '<div style="width: 100%; height: 100%; z-index: 0; background-color: red; position:absolute; top: 0; left: 0; padding:5px;">
<span>75</span></div>'
shinyApp(ui = ui, server = server)
ui <- shinyUI(fluidPage(
tableOutput("tt"),
tags$head(tags$style("#tt td{
position:relative;
};
"))
)
)
server <- shinyServer(function(input, output) {
output$tt <- renderTable({
test
}
,
sanitize.text.function = function(x) x
)
})
shinyApp(ui = ui, server = server)
test[test$test1 == 1, "test1"] <- '<div style="width: 100%; height: 100%; z-index: 0; color: red; position:absolute; top: 0; left: 0; padding:5px;">
<span>75</span></div>'
test[test$test1 == 2, "test2"] <- '<div style="width: 100%; height: 100%; z-index: 0; background-color: blue; position:absolute; top: 0; left: 0; padding:5px;">
<span>fgfvqfv</span></div>'
test[test$test1 == 3, "test2"] <- paste('<div style="width: 100%; height: 100%; z-index: 0; background-color: blue; position:absolute; top: 0; left: 0; padding:5px;">
<span>', test$test2[3], '</span></div>')
test <- data.frame(test1 = c(1:3), test2 = c(4:6))
test[test$test1 == 1, "test1"] <- '<div style="width: 100%; height: 100%; z-index: 0; color: red; position:absolute; top: 0; left: 0; padding:5px;">
<span>75</span></div>'
test[test$test1 == 2, "test2"] <- '<div style="width: 100%; height: 100%; z-index: 0; background-color: blue; position:absolute; top: 0; left: 0; padding:5px;">
<span>fgfvqfv</span></div>'
test[test$test1 == 3, "test2"] <- paste('<div style="width: 100%; height: 100%; z-index: 0; background-color: blue; position:absolute; top: 0; left: 0; padding:5px;">
<span>', test$test2[3], '</span></div>')
ui <- shinyUI(fluidPage(
tableOutput("tt"),
tags$head(tags$style("#tt td{
position:relative;
};
"))
)
)
server <- shinyServer(function(input, output) {
output$tt <- renderTable({
test
}
,
sanitize.text.function = function(x) x
)
})
shinyApp(ui = ui, server = server)
test <- data.frame(test1 = c(1:3), test2 = c(4:6))
test[test$test1 == 1, "test1"] <- '<div style="width: 100%; height: 100%; z-index: 0; color: red; position:absolute; top: 0; left: 0; padding:5px;">
<span>75</span></div>'
test[test$test1 == 2, "test2"] <- '<div style="width: 100%; height: 100%; z-index: 0; color: blue; position:absolute; top: 0; left: 0; padding:5px;">
<span>fgfvqfv</span></div>'
test[test$test1 == 3, "test2"] <- paste('<div style="width: 100%; height: 100%; z-index: 0; color: blue; position:absolute; top: 0; left: 0; padding:5px;">
<span>', test$test2[3], '</span></div>')
ui <- shinyUI(fluidPage(
tableOutput("tt"),
tags$head(tags$style("#tt td{
position:relative;
};
"))
)
)
server <- shinyServer(function(input, output) {
output$tt <- renderTable({
test
}
,
sanitize.text.function = function(x) x
)
})
shinyApp(ui = ui, server = server)
ui <- shinyUI(fluidPage(
tableOutput("tt"),
tags$head(tags$style("#tt td{
position:relative;
};
"))
)
)
server <- shinyServer(function(input, output) {
output$tt <- renderTable({
test
}
,
sanitize.text.function = function(x) x,striped = TRUE
)
})
shinyApp(ui = ui, server = server)
ui <- shinyUI(fluidPage(
tableOutput("tt"),
tags$head(tags$style("#tt td{
position:relative;
};
"))
)
)
server <- shinyServer(function(input, output) {
output$tt <- renderTable({
test
}
,
sanitize.text.function = function(x) x,striped = TRUE, colnames = FALSE
)
})
shinyApp(ui = ui, server = server)
ui <- shinyUI(fluidPage(
tableOutput("tt"),
tags$head(tags$style("#tt td{
position:relative;
};
"))
)
)
server <- shinyServer(function(input, output) {
output$tt <- renderTable({
test
}
,
sanitize.text.function = function(x) x,striped = TRUE #, colnames = FALSE
)
})
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
test <- data.frame(test1 = c(1:3), test2 = c(4:6))
test[test$test1 == 1, "test1"] <- '<div style="width: 100%; height: 100%; z-index: 0; color: red; position:absolute; top: 0; left: 0; padding:5px;">
<span>75</span></div>'
test[test$test1 == 2, "test2"] <- '<div style="width: 100%; height: 100%; z-index: 0; color: blue; position:absolute; top: 0; left: 0; padding:5px;">
<span>fgfvqfv</span></div>'
test[test$test1 == 3, "test2"] <- paste('<div style="width: 100%; height: 100%; z-index: 0; color: blue; position:absolute; top: 0; left: 0; padding:5px;">
<span>', test$test2[3], '</span></div>')
output$tt <- renderTable({
test
}
,
sanitize.text.function = function(x) x,striped = TRUE #, colnames = FALSE
)
ui <- shinyUI(fluidPage(
tableOutput("tt"),
tags$head(tags$style("#tt td{
position:relative;
};
"))
)
)
server <- shinyServer(function(input, output) {
output$tt <- renderTable({
test
}
,
sanitize.text.function = function(x) x,striped = TRUE #, colnames = FALSE
)
})
shinyApp(ui = ui, server = server)
test[test$test1 == 1, "test1"] <- '<div style="width: 100%; height: 100%; z-index: 0; color: red; padding:5px;">
<span>75</span></div>'
test <- data.frame(test1 = c(1:3), test2 = c(4:6))
test[test$test1 == 1, "test1"] <- '<div style="width: 100%; height: 100%; z-index: 0; color: red; padding:5px;">
<span>75</span></div>'
test[test$test1 == 2, "test2"] <- '<div style="width: 100%; height: 100%; z-index: 0; color: blue; position:absolute; top: 0; left: 0; padding:5px;">
<span>fgfvqfv</span></div>'
test[test$test1 == 3, "test2"] <- paste('<div style="width: 100%; height: 100%; z-index: 0; color: blue; position:absolute; top: 0; left: 0; padding:5px;">
<span>', test$test2[3], '</span></div>')
ui <- shinyUI(fluidPage(
tableOutput("tt"),
tags$head(tags$style("#tt td{
position:relative;
};
"))
)
)
server <- shinyServer(function(input, output) {
output$tt <- renderTable({
test
}
,
sanitize.text.function = function(x) x,striped = TRUE #, colnames = FALSE
)
})
shinyApp(ui = ui, server = server)
ui <- shinyUI(fluidPage(
tableOutput("tt"),
#  tags$head(tags$style("#tt td{
#                       position:relative;
#                       };
#                       "))
)
)
server <- shinyServer(function(input, output) {
output$tt <- renderTable({
test
}
,
sanitize.text.function = function(x) x,striped = TRUE #, colnames = FALSE
)
})
shinyApp(ui = ui, server = server)
ui <- shinyUI(fluidPage(
tableOutput("tt"),
#  tags$head(tags$style("#tt td{
#                       position:relative;
#                       };
#                       "))
)
)
server <- shinyServer(function(input, output) {
output$tt <- renderTable({
test
}
,
sanitize.text.function = function(x) x,striped = TRUE #, colnames = FALSE
)
})
shinyApp(ui = ui, server = server)
test <- data.frame(test1 = c(1:3), test2 = c(4:6))
test[test$test1 == 1, "test1"] <- '<div style="width: 100%; height: 100%; z-index: 0; color: red; padding:5px;">
<span>75</span></div>'
test[test$test1 == 2, "test2"] <- '<div style="width: 100%; height: 100%; color: blue; position:absolute; top: 0; left: 0; padding:5px;">
<span>fgfvqfv</span></div>'
test[test$test1 == 3, "test2"] <- paste('<div style="width: 100%; height: 100%; z-index: 0; color: blue; position:absolute; top: 0; left: 0; padding:5px;">
<span>', test$test2[3], '</span></div>')
ui <- shinyUI(fluidPage(
tableOutput("tt"),
#  tags$head(tags$style("#tt td{
#                       position:relative;
#                       };
#                       "))
)
)
server <- shinyServer(function(input, output) {
output$tt <- renderTable({
test
}
,
sanitize.text.function = function(x) x,striped = TRUE #, colnames = FALSE
)
})
shinyApp(ui = ui, server = server)
test <- data.frame(test1 = c(1:3), test2 = c(4:6))
test[test$test1 == 1, "test1"] <- '<div style="width: 100%; height: 100%; strong; z-index: 0; color: red; padding:5px;">
<span>75</span></div>'
test[test$test1 == 2, "test2"] <- '<div style="width: 100%; height: 100%; color: blue; position:absolute; top: 0; left: 0; padding:5px;">
<span>fgfvqfv</span></div>'
test[test$test1 == 3, "test2"] <- paste('<div style="width: 100%; height: 100%; z-index: 0; color: blue; position:absolute; top: 0; left: 0; padding:5px;">
<span>', test$test2[3], '</span></div>')
ui <- shinyUI(fluidPage(
tableOutput("tt"),
#  tags$head(tags$style("#tt td{
#                       position:relative;
#                       };
#                       "))
)
)
server <- shinyServer(function(input, output) {
output$tt <- renderTable({
test
}
,
sanitize.text.function = function(x) x,striped = TRUE #, colnames = FALSE
)
})
shinyApp(ui = ui, server = server)
ui <- shinyUI(fluidPage(
tableOutput("tt"),
#  tags$head(tags$style("#tt td{
#                       position:relative;
#                       };
#                       "))
)
)
server <- shinyServer(function(input, output) {
output$tt <- renderTable({
test
}
,
sanitize.text.function = function(x) x,striped = TRUE #, colnames = FALSE
)
})
shinyApp(ui = ui, server = server)
test <- data.frame(test1 = c(1:3), test2 = c(4:6))
test[test$test1 == 1, "test1"] <- '<div style="width: 100%; height: 100%; font-weight: bold; z-index: 0; color: red; padding:5px;">
<span>75</span></div>'
test[test$test1 == 2, "test2"] <- '<div style="width: 100%; height: 100%; color: blue; position:absolute; top: 0; left: 0; padding:5px;">
<span>fgfvqfv</span></div>'
test[test$test1 == 3, "test2"] <- paste('<div style="width: 100%; height: 100%; z-index: 0; color: blue; position:absolute; top: 0; left: 0; padding:5px;">
<span>', test$test2[3], '</span></div>')
ui <- shinyUI(fluidPage(
tableOutput("tt"),
#  tags$head(tags$style("#tt td{
#                       position:relative;
#                       };
#                       "))
)
)
server <- shinyServer(function(input, output) {
output$tt <- renderTable({
test
}
,
sanitize.text.function = function(x) x,striped = TRUE #, colnames = FALSE
)
})
shinyApp(ui = ui, server = server)
ui <- shinyUI(fluidPage(
tableOutput("tt"),
#  tags$head(tags$style("#tt td{
#                       position:relative;
#                       };
#                       "))
)
)
server <- shinyServer(function(input, output) {
output$tt <- renderTable({
test
}
,
sanitize.text.function = function(x) x,striped = TRUE #, colnames = FALSE
)
})
shinyApp(ui = ui, server = server)
setwd("C:/Users/admin/Desktop/Certificat Datascientist/PROJET/EnsaeProjectSoccer/SoccerApp")
players<-players%>%inner_join(Player_viz,by=c("player_api_id"))
shiny::runApp()
load("data/Match_Shiny.Rdata")
load("data/League.Rdata")
load("data/Team.Rdata")
load("data/Team_home_viz.RData")
load("data/Team_away_viz.RData")
load("data/Match_Shiny.Rdata")
load("data/Player_viz.Rdata")
runApp()
runApp()
players <- filter_match(Match_Shiny,"Paris Saint-Germain","FC Nantes")
players<- as.data.frame(t(players[,c(56:77)]))
colnames(players)<-"player_api_id"
players<-players%>%inner_join(Player_viz,by=c("player_api_id"))
View(players)
View(players)
runApp()
runApp()
runApp()
View(players)
View(players)
colnames(players)<-c("player_api_id","Name","Age","Height","Weight","Overall rating","Preferred foot","Attacking work rate","Defensive work rate")
View(players)
View(players)
View(players)
View(players)
players$test<-as.Date((substr(players$Age,1,10))
View(players)
View(players)
players$test<-as.Date(substr(players$Age,1,10))
View(players)
View(players)
View(Match_Shiny)
View(Match_Shiny)
table(Match_Shiny$date)
players$test2=trunc(time_length(interval(players$test, as.Date(substr("2015-07-18 00:00:00",1,10))), "years"))
library(lubridate)
players$test2=trunc(time_length(interval(players$test, as.Date(substr("2015-07-18 00:00:00",1,10))), "years"))
View(players)
View(players)
players$Age=trunc(time_length(interval(players$test, as.Date(substr("2015-07-18 00:00:00",1,10))), "years"))
View(players)
View(players)
View(players)
View(players)
table(Player_viz$height)
View(Player_viz)
players$test<-paste(floor(Player_viz$height/100),"m")
View(players)
View(players)
players$test3<-floor(Player_viz$height/100)
players$test3<-Player_viz$height/100
players$test3<-(Player_viz$height)/100
players$test3<-paste(floor(players$height/100),"m")
View(players)
View(players)
players$test3<-paste(as.character(floor(players$height/100)),"m")
View(players)
View(players)
players$test3<-floor(players$height/100)
players$test3<-players$height/100
players$test3<-players$Height/100
View(players)
players$test3<-paste(floor(players$height/100),"m")
View(players)
View(players)
players$test3<-paste(floor(players$Height/100),"m")
View(players)
View(players)
View(players)
View(players)
players$test3<-paste(as.integer(floor(players$Height/100)),"m")
View(players)
View(players)
players$test3<-paste(floor(players$Height/100),"m",sep="")
View(players)
View(players)
players$test4<-players$Height-floor(players$Height/100)*100
View(players)
View(players)
players$test4<-round(players$Height-floor(players$Height/100)*100)
View(players)
View(players)
players$test3<-paste(floor(players$Height/100),"m",round(players$Height-floor(players$Height/100)*100),sep="")
View(players)
View(players)
View(players)
View(players)
players$test4<-players$Weight/0,453592
players$test4<-players$Weight/0.453592
View(players)
View(players)
players$test4<-paste(players$Weight*0.453592,"kg",sep="")
View(players)
View(players)
players$test4<-paste(round(players$Weight*0.453592),"kg",sep="")
View(players)
View(players)
Player_viz$Age=trunc(time_length(interval(as.Date(substr(Player_viz$Age,1,10)), as.Date(substr("2015-07-18 00:00:00",1,10))), "years"))
Player_viz$Height<-paste(floor(Player_viz$Height/100),"m",round(Player_viz$Height-floor(Player_viz$Height/100)*100),sep="")
Player_viz$Weight<-paste(round(Player_viz$Weight*0.453592),"kg",sep="")
View(Player_viz)
View(Player_viz)
colnames(Player_viz)<-c("player_api_id","Name","Age","Height","Weight","Overall rating","Preferred foot","Attacking work rate","Defensive work rate")
library(lubridate)
Player_viz$Age=trunc(time_length(interval(as.Date(substr(Player_viz$Age,1,10)), as.Date(substr("2015-07-18 00:00:00",1,10))), "years"))
Player_viz$Height<-paste(floor(Player_viz$Height/100),"m",round(Player_viz$Height-floor(Player_viz$Height/100)*100),sep="")
Player_viz$Weight<-paste(round(Player_viz$Weight*0.453592),"kg",sep="")
View(Player_viz)
View(Player_viz)
load("data/Player_viz.Rdata")
View(Player_viz)
View(Player_viz)
colnames(Player_viz)<-c("player_api_id","Name","Age","Height","Weight","Overall rating","Preferred foot","Attacking work rate","Defensive work rate")
library(lubridate)
Player_viz$Age=trunc(time_length(interval(as.Date(substr(Player_viz$Age,1,10)), as.Date(substr("2015-07-18 00:00:00",1,10))), "years"))
Player_viz$Height<-paste(floor(Player_viz$Height/100),"m",round(Player_viz$Height-floor(Player_viz$Height/100)*100),sep="")
Player_viz$Weight<-paste(round(Player_viz$Weight*0.453592),"kg",sep="")
View(Player_viz)
View(Player_viz)
Player_viz<-Player_viz[,c(1,2,3,4,5,7,6,8,9)]
View(Player_viz)
View(Player_viz)
save(Player_viz,file="data/Player_viz.RData")
runApp()
View(players)
View(players)
runApp()
Player_viz$Age<<-as.integer(Player_viz$Age)
Player_viz$Age<-as.integer(Player_viz$Age)
runApp()
save(Player_viz,file="data/Player_viz.RData")
runApp()
Player_viz<-Player_viz[,c(1,2,3,4,5,6,8,9)]
runApp()
View(Player_viz)
View(Player_viz)
Player_viz<-Player_viz[,c(1,2,3,4,5,6,8,9)]
Player_viz$`Preferred foot`<-"NULL"
runApp()
Player_viz$`Preferred foot`<-NULL
runApp()
View(Player_viz)
View(Player_viz)
load("data/Match_Shiny.Rdata")
load("data/Player_viz.Rdata")
View(Player_viz)
View(Player_viz)
View(Player_viz)
View(Player_viz)
Player_viz$Age<-as.integer(Player_viz$Age)
Player_viz$`Preferred foot`<-NULL
runApp()
save(Player_viz,file="data/Player_viz.RData")
runApp()
runApp()
runApp()
